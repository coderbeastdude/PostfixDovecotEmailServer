#!/bin/bash

# Script to install and configure SSL certificates for the email server
# Part of the email server setup automation

set -euo pipefail

# Load configuration
source ../email-server-config.conf

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check DNS before SSL
check_dns_readiness() {
    print_info "Checking DNS readiness for SSL certificate installation..."
    
    # Check if mail subdomain resolves to server IP
    RESOLVED_IP=$(dig +short A mail.$DOMAIN)
    
    if [[ "$RESOLVED_IP" != "$SERVER_IP" ]]; then
        print_error "DNS not properly configured!"
        print_error "mail.$DOMAIN resolves to: $RESOLVED_IP"
        print_error "Expected: $SERVER_IP"
        print_warning "Please ensure DNS is configured correctly and propagated"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        print_info "DNS check passed!"
    fi
}

# Function to install Let's Encrypt certificate
install_letsencrypt_cert() {
    print_info "Installing Let's Encrypt SSL certificate..."
    
    # Stop any service that might be using port 80
    systemctl stop apache2 2>/dev/null || true
    systemctl stop nginx 2>/dev/null || true
    
    # Generate certificate using standalone mode
    certbot certonly \
        --standalone \
        --preferred-challenges http-01 \
        --cert-name mail.$DOMAIN \
        -d mail.$DOMAIN \
        --email $ADMIN_EMAIL \
        --agree-tos \
        --non-interactive \
        --force-renewal
    
    if [[ $? -eq 0 ]]; then
        print_info "SSL certificate installed successfully!"
    else
        print_error "SSL certificate installation failed!"
        exit 1
    fi
}

# Function to set up certificate renewal
setup_cert_renewal() {
    print_info "Setting up automatic certificate renewal..."
    
    # Create renewal hook script
    cat << 'EOF' > /etc/letsencrypt/renewal-hooks/deploy/email-server-reload.sh
#!/bin/bash
# Reload services after certificate renewal

# Reload Postfix
systemctl reload postfix

# Reload Dovecot
systemctl reload dovecot

# Reload Apache if running
if systemctl is-active --quiet apache2; then
    systemctl reload apache2
fi

# Reload Nginx if running
if systemctl is-active --quiet nginx; then
    systemctl reload nginx
fi

# Log renewal
echo "$(date): SSL certificate renewed and services reloaded" >> /var/log/email-server-setup/ssl-renewal.log
EOF
    
    chmod +x /etc/letsencrypt/renewal-hooks/deploy/email-server-reload.sh
    
    # Enable and start certbot timer
    systemctl enable certbot.timer
    systemctl start certbot.timer
    
    # Test renewal
    print_info "Testing certificate renewal process..."
    certbot renew --dry-run
    
    print_info "Certificate renewal configured successfully!"
}

# Function to create SSL certificate backup
backup_ssl_certificates() {
    print_info "Creating SSL certificate backup..."
    
    BACKUP_SSL_DIR="$BACKUP_DIR/ssl/$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_SSL_DIR"
    
    # Backup the entire letsencrypt directory
    rsync -av /etc/letsencrypt/ "$BACKUP_SSL_DIR/"
    
    # Create a tarball for easier management
    tar -czf "$BACKUP_DIR/ssl/ssl-backup-$(date +%Y%m%d).tar.gz" "$BACKUP_SSL_DIR"
    
    # Keep only last 7 days of backups
    find "$BACKUP_DIR/ssl" -name "ssl-backup-*.tar.gz" -mtime +7 -delete
    
    print_info "SSL certificates backed up to $BACKUP_DIR/ssl/"
}

# Function to configure SSL parameters
configure_ssl_params() {
    print_info "Configuring SSL parameters..."
    
    # Create SSL parameters file
    cat << 'EOF' > /etc/ssl/certs/ssl-params.conf
# Modern SSL configuration for email server
# Generated by email server setup script

# SSL Protocols and Ciphers
ssl_protocols = TLSv1.2 TLSv1.3
ssl_cipher_list = ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
ssl_prefer_cipher_order = no

# Additional SSL settings
ssl_session_cache = shared:SSL:1m
ssl_session_timeout = 1d
ssl_session_tickets = off

# DH parameters
ssl_dh = /etc/ssl/certs/dhparam.pem

# HSTS (HTTP Strict Transport Security)
ssl_buffer_size = 1400
ssl_session_cache = shared:SSL:10m
EOF
    
    # Generate DH parameters (this may take a while)
    if [[ ! -f /etc/ssl/certs/dhparam.pem ]]; then
        print_info "Generating DH parameters (this may take several minutes)..."
        openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
        chmod 644 /etc/ssl/certs/dhparam.pem
    fi
    
    print_info "SSL parameters configured"
}

# Function to create SSL certificate monitoring
create_ssl_monitoring() {
    print_info "Creating SSL certificate monitoring..."
    
    cat << 'EOF' > /usr/local/bin/check-ssl-expiry.sh
#!/bin/bash
# Check SSL certificate expiry for email server

DOMAIN="$(cat /etc/email-server-config.conf | grep "^DOMAIN=" | cut -d= -f2 | tr -d '"')"
CERT_FILE="/etc/letsencrypt/live/mail.$DOMAIN/cert.pem"
LOG_FILE="/var/log/email-server-setup/ssl-monitor.log"

# Check certificate expiry
if [[ -f "$CERT_FILE" ]]; then
    EXPIRY_DATE=$(openssl x509 -enddate -noout -in "$CERT_FILE" | cut -d= -f2)
    EXPIRY_EPOCH=$(date -d "$EXPIRY_DATE" +%s)
    CURRENT_EPOCH=$(date +%s)
    DAYS_REMAINING=$(( ($EXPIRY_EPOCH - $CURRENT_EPOCH) / 86400 ))
    
    echo "$(date): SSL certificate for mail.$DOMAIN expires in $DAYS_REMAINING days" >> "$LOG_FILE"
    
    # Send alert if less than 30 days remaining
    if [[ $DAYS_REMAINING -lt 30 ]]; then
        echo "WARNING: SSL certificate for mail.$DOMAIN will expire in $DAYS_REMAINING days!" >> "$LOG_FILE"
        # You can add email notification here if needed
    fi
else
    echo "$(date): ERROR: SSL certificate not found at $CERT_FILE" >> "$LOG_FILE"
fi

# Check certificate validity
openssl x509 -checkend 2592000 -noout -in "$CERT_FILE"
if [[ $? -ne 0 ]]; then
    echo "$(date): WARNING: SSL certificate will expire within 30 days!" >> "$LOG_FILE"
fi
EOF
    
    chmod +x /usr/local/bin/check-ssl-expiry.sh
    
    # Add to crontab for daily monitoring
    (crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/check-ssl-expiry.sh") | crontab -
    
    print_info "SSL certificate monitoring configured"
}

# Function to generate TLSA record
generate_tlsa_record() {
    print_info "Generating TLSA record for DANE..."
    
    # Generate TLSA hash
    CERT_FILE="/etc/letsencrypt/live/mail.$DOMAIN/cert.pem"
    
    if [[ -f "$CERT_FILE" ]]; then
        TLSA_HASH=$(openssl x509 -in "$CERT_FILE" -pubkey -noout | \
            openssl pkey -pubin -outform DER | \
            openssl dgst -sha256 -binary | \
            xxd -p -c 32)
        
        # Save TLSA record
        cat << EOF > /etc/email-server/tlsa-record.txt
# TLSA Record for DANE (Domain-based Named Entity)
# Add this to your DNS zone file

_443._tcp.mail.$DOMAIN.    3600 IN TLSA    3 1 1 $TLSA_HASH

# Verification command:
# dig +short TLSA _443._tcp.mail.$DOMAIN
EOF
        
        print_info "TLSA record generated: /etc/email-server/tlsa-record.txt"
        print_warning "Please add the TLSA record to your DNS zone"
    else
        print_error "Certificate file not found, cannot generate TLSA record"
    fi
}

# Function to test SSL configuration
test_ssl_configuration() {
    print_info "Testing SSL configuration..."
    
    # Test SSL using openssl s_client
    echo | openssl s_client -connect mail.$DOMAIN:443 -servername mail.$DOMAIN 2>/dev/null | \
        openssl x509 -noout -dates
    
    # Test STARTTLS for email
    print_info "Testing STARTTLS for SMTP..."
    echo | openssl s_client -connect mail.$DOMAIN:587 -starttls smtp 2>/dev/null | \
        grep -E "(Verify return code|verify error)" || print_info "STARTTLS test completed"
    
    # Create SSL test report
    cat << EOF > /etc/email-server/ssl-test-report.txt
SSL Configuration Test Report
Generated on: $(date)

Certificate Information:
$(openssl x509 -in /etc/letsencrypt/live/mail.$DOMAIN/cert.pem -text -noout | grep -E "(Subject:|Issuer:|Not Before|Not After)")

Certificate Chain:
$(openssl s_client -showcerts -connect mail.$DOMAIN:443 </dev/null 2>/dev/null | grep -E "(subject|issuer)")

Supported Protocols and Ciphers:
$(openssl ciphers -v | grep -E "TLSv1.[23]")

STARTTLS Test Results:
SMTP: $(echo | openssl s_client -connect mail.$DOMAIN:587 -starttls smtp 2>/dev/null | grep -q "Verify return code: 0" && echo "OK" || echo "FAILED")
EOF
    
    print_info "SSL test report generated: /etc/email-server/ssl-test-report.txt"
}

# Main execution
print_info "Starting SSL certificate installation..."

# Check DNS readiness
check_dns_readiness

# Install Let's Encrypt certificate
install_letsencrypt_cert

# Set up automatic renewal
setup_cert_renewal

# Backup certificates
backup_ssl_certificates

# Configure SSL parameters
configure_ssl_params

# Create monitoring
create_ssl_monitoring

# Generate TLSA record
generate_tlsa_record

# Test SSL configuration
test_ssl_configuration

# Set proper permissions
chmod 644 /etc/letsencrypt/live/mail.$DOMAIN/fullchain.pem
chmod 644 /etc/letsencrypt/live/mail.$DOMAIN/chain.pem
chmod 600 /etc/letsencrypt/live/mail.$DOMAIN/privkey.pem

print_info "SSL certificate installation complete!"
print_info "Certificate files:"
echo "  - Certificate: /etc/letsencrypt/live/mail.$DOMAIN/fullchain.pem"
echo "  - Private Key: /etc/letsencrypt/live/mail.$DOMAIN/privkey.pem"
echo "  - Chain: /etc/letsencrypt/live/mail.$DOMAIN/chain.pem"
echo
print_warning "Important notes:"
echo "1. Certificate will auto-renew via systemd timer"
echo "2. TLSA record has been generated - add to DNS"
echo "3. SSL monitoring script runs daily"
echo "4. Services will reload automatically on renewal"
